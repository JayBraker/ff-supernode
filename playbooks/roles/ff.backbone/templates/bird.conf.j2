log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
debug protocols all;

router id {{ bird.router_id }};

# The Device protocol is not a real routing protocol. It doesn't generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel.
protocol device {
    scan time 0;
};

protocol direct {
    interface "*";
};

protocol kernel {
    metric 64;
    device routes;
    import all;
    export all;
    kernel table {{ bird.kernel_table }}
};

{% if bird.ospf is defined %}
protocol ospf {{ bird.ospf.name }} {
    import all;
    export none;
    ecmp yes limit 16;
    merge external yes;
    
    {% for area in bird.protocol.ospf.area %}
    area {{ area.id }} {
        {% for interface in area.network %}
        interface "{{ interface.name }}" {
            {% if interface.cost is defined %}
            cost {{ interface.cost }};
            {% endif %}
            {% if interface.stub is defined and interface.stub %}
            stub yes;
            {% endif %}
            {% if interface.type is defined %}
            type {{interface.type }};
            {% endif %}
            {% if interface.hello is defined %}
            hello {{interface.hello }};
            {% endif %}
            {% if interface.retransmit is defined %}
            retransmit {{interface.retransmit }};
            {% endif %}
            {% if interface.wait is defined %}
            wait {{interface.wait }};
            {% endif %}
            {% if interface.dead is defined %}
            dead {{interface.dead }};
            {% endif %}
            {% if interface.check is defined %}
            check {{interface.type }};
            {% endif %}
            {% if interface.authentication is defined %}
            authentication {{interface.authentication }};
            {% endif %}
        };
        {% endfor %}
    };
    {% endfor %}
};
{% endif %}

{% if bird.staticroutes is defined %}
{% for route in bird.staticroutes %}
protocol static {{ route.name }} {
    import all;
    {% for rule in route.rules %}
    {{ rule }};
    {% endfor %}
};
{% endfor %}
{% endif %}

{% if bird.filter is defined %}
{% for filter in bird.filter %}
filter {{ filter.name }} {
    {% for rule in filter.rules %}
    {{ rule }};
    {% endfor%}
    {% if filter.blacklist is defined filter.blacklist %}
    accept;
    {% else %}
    reject;
    {% endif %}
};
{% endfor %}
{% endif %}

{% if bird.templates %}
{% for template in bird.templates %}
template {{ template.protocol }} {% if template.name is defined %}{{ template.name }}{% endif %} {
    local as {{ template.as }};
    {% for rule in template.imports %}
    import {{ rule }};
    {% endfor %}
    {% for rule in template.exports %}
    export {{ rule }};
    {% endfor %}
    {% if template.next_hop is defined and template.next_hop %}
    next hop self;
    {% endif %}
    {% if template.multihop is defined %}
    multihop {{ template.multihop }};
    {% endif %}
};
{% endfor %}
{% endif %}

include "/etc/bird/ebgp.conf";
